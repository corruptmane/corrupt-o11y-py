[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "corrupt-o11y"
dynamic = ["version"]
description = "A comprehensive observability library for Python applications with logging, metrics, and tracing"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Mykyta", email = "mykyta@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Logging",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
]
keywords = ["observability", "monitoring", "logging", "metrics", "tracing", "opentelemetry", "prometheus"]
requires-python = ">=3.11"
dependencies = [
    "aiohttp>=3.12.13",
    "opentelemetry-api>=1.34.1",
    "opentelemetry-exporter-otlp-proto-grpc>=1.34.1",
    "opentelemetry-exporter-otlp-proto-http>=1.34.1",
    "opentelemetry-sdk>=1.34.1",
    "orjson>=3.10.18",
    "prometheus-client>=0.22.1",
    "structlog>=25.4.0",
]
[dependency-groups]
dev = [
    "mypy>=1.16.1",
    "ruff>=0.12.2",
    "types-orjson>=3.6.2",
]

[project.urls]
Homepage = "https://github.com/mykyta/corrupt-o11y-py"
Documentation = "https://github.com/mykyta/corrupt-o11y-py#readme"
Repository = "https://github.com/mykyta/corrupt-o11y-py.git"
"Bug Tracker" = "https://github.com/mykyta/corrupt-o11y-py/issues"

[tool.hatch.version]
path = "src/corrupt_o11y/__meta__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/corrupt_o11y"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"
src = ["src"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "A",      # flake8-builtins
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # NumPy-specific rules
    "PERF",   # Perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
]
ignore = [
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "ISC001",  # Implicitly concatenated string literals (conflicts with formatter)
    "S101",    # Use of assert detected
    "S104",    # Possible binding to all interfaces
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "PD901",   # Avoid using the generic variable name `df` for DataFrames
    "TC003",   # Move standard library import into a type-checking block
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["corrupt_o11y"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
strict = true
disallow_any_generics = true
disallow_any_explicit = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true
show_column_numbers = true
pretty = true
error_summary = true

# Paths
files = ["src"]
exclude = [
    "build/",
    "dist/",
    "venv/",
    ".venv/",
]

# Per-module options
[[tool.mypy.overrides]]
module = [
    "prometheus_client.*",
    "structlog.*",
    "opentelemetry.*",
    "orjson.*",
]
ignore_missing_imports = true
